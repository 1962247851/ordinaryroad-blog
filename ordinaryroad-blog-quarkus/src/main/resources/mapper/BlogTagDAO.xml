<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ MIT License
  ~
  ~ Copyright (c) 2021 苗锦洲
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.ordinaryroad.blog.quarkus.dal.dao.BlogTagDAO">

    <resultMap id="BaseDOResultMap" type="tech.ordinaryroad.commons.mybatis.quarkus.model.BaseDO">
        <id column="id" property="id"/>
        <result column="uuid" property="uuid"/>
        <result column="create_by" property="createBy"/>
        <result column="created_time" property="createdTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <resultMap id="BaseResultMap" type="tech.ordinaryroad.blog.quarkus.dal.entity.BlogTag" extends="BaseDOResultMap">
        <result column="name" property="name"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <select id="selectIdByNameIn" resultType="string">
        select bt.uuid
        from blog_tag bt
        where
        bt.name in
        <foreach collection="nameList" item="item" open="(" close=")" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="countByName" resultType="int">
        select count(*)
        from blog_tag bt
        where bt.name = #{name,jdbcType=VARCHAR}
    </select>

    <select id="selectNameListByUuidIn" resultType="string">
        select bt.name
        from blog_tag bt
        where
        bt.uuid in
        <foreach collection="uuidList" item="item" open="(" close=")" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getTopNByUserId" resultType="map">
        SELECT bt.uuid, bt.name, COUNT(ba.uuid) article_count
        FROM blog_tag bt
        INNER JOIN (SELECT uuid, tag_ids FROM blog_article WHERE status = 'PUBLISH'
        <if test="userId != null and userId != ''">
            AND create_by = #{userId}
        </if>
        ) ba ON ba.tag_ids LIKE CONCAT('%', bt.uuid, '%')
        WHERE bt.deleted = 0
        GROUP BY bt.uuid
        ORDER BY article_count DESC
        LIMIT
        <choose>
            <when test="n != null and n >= 0 and n &lt;= 50">
                ${n}
            </when>
            <otherwise>
                10
            </otherwise>
        </choose>
    </select>

</mapper>